# Use Ruby 3.2.2 as base image
FROM ruby:3.2.2-slim

# Install system dependencies and Google Cloud SDK
RUN apt-get update -qq && \
    apt-get install -y build-essential sqlite3 libsqlite3-dev curl gnupg && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update -y && \
    apt-get install -y google-cloud-sdk && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Gemfile and install dependencies
COPY Gemfile Gemfile.lock ./
RUN bundle install

# Copy application code
COPY . .

# Create database directory
RUN mkdir -p app/db && chmod 777 app/db   

# Create scripts directory
# RUN mkdir -p scripts

# # Create database sync script
# RUN echo '#!/bin/bash\n\
# if [ -f /app/db/app.sqlite3 ]; then\n\
#   gsutil cp /app/db/app.sqlite3 gs://${BUCKET_NAME}/app.sqlite3\n\
# fi' > /app/scripts/sync_db.sh && \
# chmod +x /app/scripts/sync_db.sh

# # Create startup script
# RUN echo '#!/bin/bash\n\
# if gsutil stat gs://${BUCKET_NAME}/app.sqlite3 2>/dev/null; then\n\
#   gsutil cp gs://${BUCKET_NAME}/app.sqlite3 /app/db/\n\
# fi\n\
# if [ ! -f /app/db/app.sqlite3 ]; then\n\
#   bundle exec rake db:migrate\n\
# fi\n\
# trap "/app/scripts/sync_db.sh" EXIT\n\
# bundle exec rackup --host 0.0.0.0 -p ${PORT:-8080}' > /app/scripts/start.sh && \
# chmod +x /app/scripts/start.sh

# Set environment variables
ENV RACK_ENV=production
ENV PORT=8080

# Start the application using the startup script
# CMD ["/app/scripts/start.sh"] 
CMD ["bundle", "exec", "rackup", "--host", "0.0.0.0", "-p", "8080"] 